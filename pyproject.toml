# -*- coding: utf-8 -*-

# license: bsd 3-clause
[build-system]
requires = ["setuptools >= 61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "openml"
dynamic = ["version"]  # will take it from the __version__ file, update there
dependencies = [
  "liac-arff>=2.4.0",
  "xmltodict",
  "requests",
  "scikit-learn>=0.18",
  "python-dateutil",  # installed through pandas anyway.
  "pandas>=1.0.0",
  "scipy>=0.13.3",
  "numpy>=1.6.2",
  "minio",
  "pyarrow",
  "tqdm",  # for minio download progress bars
  "packaging",
]
requires-python = ">=3.8"
authors = [
  { name = "matthias feurer", email="feurerm@informatik.uni-freiburg.de" },
  { name = "jan van rijn" },
  { name = "arlind kadra" },
  { name = "pieter gijsbers" },
  { name = "neeratyoy mallik" },
  { name = "sahithya ravi" },
  { name = "andreas mÃ¼ller" },
  { name = "joaquin vanschoren " },
  { name = "frank hutter" },
]
readme = "readme.md"
description = "python api for openml"
classifiers = [
  "intended audience :: science/research",
  "intended audience :: developers",
  "license :: osi approved :: bsd license",
  "programming language :: python",
  "topic :: software development",
  "topic :: scientific/engineering",
  "operating system :: posix",
  "operating system :: unix",
  "operating system :: macos",
  "programming language :: python :: 3",
  "programming language :: python :: 3.8",
  "programming language :: python :: 3.9",
  "programming language :: python :: 3.10",
  "programming language :: python :: 3.11",
  "programming language :: python :: 3.12",
]
license = { file = "license" }

[project.scripts]
openml = "openml.cli:main"

[project.optional-dependencies]
test=[
    "nbconvert",
    "jupyter_client",
    "matplotlib",
    "pytest",
    "pytest-xdist",
    "pytest-timeout",
    "nbformat",
    "oslo.concurrency",
    "flaky",
    "pre-commit",
    "pytest-cov",
    "pytest-rerunfailures",
    "mypy",
    "ruff",
]
examples=[
    "matplotlib",
    "jupyter",
    "notebook",
    "nbconvert",
    "nbformat",
    "jupyter_client",
    "ipython",
    "ipykernel",
    "seaborn",
]
examples_unix=["fanova"]
docs=[
    "sphinx>=3",
    "sphinx-gallery",
    "sphinx_bootstrap_theme",
    "numpydoc",
]

[project.urls]
home="https://openml.org/"
documentation = "https://openml.github.io/openml-python/"
source = "https://github.com/openml/openml-python"

[tool.setuptools.packages.find]
where = [""]
include = ["openml*"]
namespaces = false

[tool.setuptools.package-data]
openml = ["*.txt", "*.md", "py.typed"]

[tool.setuptools.dynamic]
version = {attr = "openml.__version__.__version__"}

# https://docs.pytest.org/en/7.2.x/reference/reference.html#ini-options-ref
[tool.pytest.ini_options]
testpaths = ["tests"]
minversion = "7.0"
xfail_strict = true
filterwarnings=[
    "ignore:the matrix subclass:pendingdeprecationwarning"
]
markers = [
  "server: anything that connects to a server",
  "upload: anything that uploads to a server",
  "production: any interaction with the production server",
  "cache: anything that interacts with the (test) cache",
]

# https://github.com/charliermarsh/ruff
[tool.ruff]
target-version = "py37"
line-length = 100
show-source = true
src = ["openml", "tests", "examples"]
unsafe-fixes = true

# allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-za-z0-9_]*[a-za-z0-9]+?))$"

select = [
  "a",
  # "ann", # handled by mypy
  "arg",
  "b",
  "ble",
  "com",
  "c4",
  "d",
  # "dtz",  # one day i should know how to utilize timezones and dates...
  "e",
  # "exe", meh
  "era",
  "f",
  "fbt",
  "i",
  # "isc",  # favours implicit string concatenation
  "inp",
  # "int", # i don't understand this one
  "n",
  "npy",
  "pd",
  "plc",
  "ple",
  "plr",
  "plw",
  "pie",
  "pt",
  "pth",
  # "pyi", # specific to .pyi files for type stubs
  "q",
  "pgh004",
  "ret",
  "ruf",
  "c90",
  "s",
  # "slf",    # private member accessed (sure, it's python)
  "sim",
  # "try", # good in principle, would take a lot of work to statisfy
  "t10",
  "t20",
  "tid",
  "tch",
  "up",
  "n",
  "w",
  "ytt",
]

ignore = [
  "d105",    # missing docstring in magic mthod
  "d401",    # first line of docstring should be in imperative mood
  "n806",    # variable x in function should be lowercase
  "e731",    # do not assign a lambda expression, use a def
  "s101",    # use of assert detected.
  "w292",    # no newline at end of file
  "plc1901", # "" can be simplified to be falsey
  "tch003",  # move stdlib import into type_checking
  "com812",  # trailing comma missing (handled by linter, ruff recommend disabling if using formatter)
  "n803",    # argument should be lowercase (but we accept things like `x`)

  # todo(@eddibergman): these should be enabled
  "d100",    # missing docstring in public module
  "d103",    # missing docstring in public function
  "d104",    # missing docstring in public package

  # todo(@eddiebergman): maybe fix
   "plr2004", # magic value used in comparison, consider replacing 2 with a constant variable
  "d400",    # first line must end with a period (@eddiebergman too many to fix so ignoring this for now)
  "d203",    # 1 blank line required before class docstring
  "d205",    # 1 blank line between summary and description

  # todo(@eddiebergman): could be backwards breaking
  "n802",    # public function name should be lower case (i.e. get_x())
]

exclude = [
  # todo(eddiebergman): tests should be re-enabled after the refactor
  "tests",
  #
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".hg",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "venv",
  "docs",
]

# exclude a variety of commonly ignored directories.
[tool.ruff.per-file-ignores]
"tests/*.py" = [
  "d100",   # undocumented public module
  "d101",   # missing docstring in public class
  "d102",   # missing docstring in public method
  "d103",   # missing docstring in public function
  "s101",   # use of assert
  "ann201", # missing return type annotation for public function
  "fbt001", # positional boolean argument
  "plr2004",# no use of magic numbers
  "pd901",  #  x is a bad variable name. (pandas)
  "tch",    # https://docs.astral.sh/ruff/rules/#flake8-type-checking-tch
  "n803",   # argument name {name} should be lowercase
]
"openml/cli.py" = [
  "t201",   # print found
  "t203",   # pprint found
]
"openml/__version__.py" = [
  "d100",   # undocumented public module
]
"__init__.py" = [
  "i002",   # missing required import (i.e. from __future__ import annotations)
]
"examples/*.py" = [
  "d101",   # missing docstring in public class
  "d102",   # missing docstring in public method
  "d103",   # missing docstring in public function
  "d415",   # first line should end with a . or ? or !
  "inp001", # file is part of an implicit namespace package, add an __init__.py
  "i002",   # missing required import (i.e. from __future__ import annotations)
  "e741",   # ambigiuous variable name
  "t201",   # print found
  "t203",   # pprint found
  "era001", # found commeneted out code
  "e402",   # module level import not at top of cell
  "e501",   # line too long
]


[tool.ruff.isort]
known-first-party = ["openml"]
no-lines-before = ["future"]
required-imports = ["from __future__ import annotations"]
combine-as-imports = true
extra-standard-library = ["typing_extensions"]
force-wrap-aliases = true

[tool.ruff.pydocstyle]
convention = "numpy"

[tool.mypy]
python_version = "3.7"
packages = ["openml", "tests"]

show_error_codes = true

warn_unused_configs = true # warn about unused [tool.mypy] lines

follow_imports = "normal"      # type check top level api code we use from imports
ignore_missing_imports = false # prefer explicit ignores

disallow_untyped_defs = true       # all functions must have types
disallow_untyped_decorators = true # ... even decorators
disallow_incomplete_defs = true    # ...all types

no_implicit_optional = true
check_untyped_defs = true

warn_return_any = true


[[tool.mypy.overrides]]
module = ["tests.*", "openml.extensions.sklearn.*"]

# todo(eddiebergman): this should be re-enabled after tests get refactored
ignore_errors = true
#disallow_untyped_defs = false          # sometimes we just want to ignore verbose types
#disallow_untyped_decorators = false    # test decorators are not properly typed
#disallow_incomplete_defs = false       # sometimes we just want to ignore verbose types
#disable_error_code = ["var-annotated"]
