
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/30_extended/flows_and_runs_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_30_extended_flows_and_runs_tutorial.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_30_extended_flows_and_runs_tutorial.py:


Flows and Runs
==============

How to train/run a model and how to upload the results.

.. GENERATED FROM PYTHON SOURCE LINES 7-14

.. code-block:: Python


    # License: BSD 3-Clause

    import openml
    from sklearn import compose, ensemble, impute, neighbors, preprocessing, pipeline, tree









.. GENERATED FROM PYTHON SOURCE LINES 15-19

We'll use the test server for the rest of this tutorial.

.. warning::
   .. include:: ../../test_server_usage_warning.txt

.. GENERATED FROM PYTHON SOURCE LINES 19-21

.. code-block:: Python

    openml.config.start_using_configuration_for_example()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/work/openml-python/openml-python/examples/30_extended/flows_and_runs_tutorial.py:19: UserWarning: Switching to the test server https://test.openml.org/api/v1/xml to not upload results to the live server. Using the test server may result in reduced performance of the API!
      openml.config.start_using_configuration_for_example()




.. GENERATED FROM PYTHON SOURCE LINES 22-26

Train machine learning models
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Train a scikit-learn model on the data manually.

.. GENERATED FROM PYTHON SOURCE LINES 26-35

.. code-block:: Python


    # NOTE: We are using dataset 68 from the test server: https://test.openml.org/d/68
    dataset = openml.datasets.get_dataset(dataset_id="eeg-eye-state", version=1)
    X, y, categorical_indicator, attribute_names = dataset.get_data(
        target=dataset.default_target_attribute
    )
    clf = neighbors.KNeighborsClassifier(n_neighbors=1)
    clf.fit(X, y)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-container-id-2 {color: black;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id="sk-container-id-2" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>KNeighborsClassifier(n_neighbors=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-2" type="checkbox" checked><label for="sk-estimator-id-2" class="sk-toggleable__label sk-toggleable__label-arrow">KNeighborsClassifier</label><div class="sk-toggleable__content"><pre>KNeighborsClassifier(n_neighbors=1)</pre></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 36-39

You can also ask for meta-data to automatically preprocess the data.

* e.g. categorical features -> do feature encoding

.. GENERATED FROM PYTHON SOURCE LINES 39-50

.. code-block:: Python

    dataset = openml.datasets.get_dataset(dataset_id="credit-g", version=1)
    X, y, categorical_indicator, attribute_names = dataset.get_data(
        target=dataset.default_target_attribute
    )
    print(f"Categorical features: {categorical_indicator}")
    transformer = compose.ColumnTransformer(
        [("one_hot_encoder", preprocessing.OneHotEncoder(categories="auto"), categorical_indicator)]
    )
    X = transformer.fit_transform(X)
    clf.fit(X, y)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Categorical features: [True, False, True, True, False, True, True, False, True, True, False, True, False, True, True, False, True, False, True, True]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-container-id-3 {color: black;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id="sk-container-id-3" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>KNeighborsClassifier(n_neighbors=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-3" type="checkbox" checked><label for="sk-estimator-id-3" class="sk-toggleable__label sk-toggleable__label-arrow">KNeighborsClassifier</label><div class="sk-toggleable__content"><pre>KNeighborsClassifier(n_neighbors=1)</pre></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 51-54

Runs: Easily explore models
^^^^^^^^^^^^^^^^^^^^^^^^^^^
We can run (many) scikit-learn algorithms on (many) OpenML tasks.

.. GENERATED FROM PYTHON SOURCE LINES 54-66

.. code-block:: Python


    # Get a task
    task = openml.tasks.get_task(403)

    # Build any classifier or pipeline
    clf = tree.DecisionTreeClassifier()

    # Run the flow
    run = openml.runs.run_model_on_task(clf, task)

    print(run)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    OpenML Run
    ==========
    Uploader Name...................: None
    Metric..........................: None
    Local Result - Accuracy (+- STD): 0.8445 +- 0.0137
    Local Runtime - ms (+- STD).....: 171.0149 +- 3.9358
    Run ID..........................: None
    Task ID.........................: 403
    Task Type.......................: None
    Task URL........................: https://test.openml.org/t/403
    Flow ID.........................: 33
    Flow Name.......................: sklearn.tree._classes.DecisionTreeClassifier
    Flow URL........................: https://test.openml.org/f/33
    Setup ID........................: None
    Setup String....................: Python_3.8.18. Sklearn_1.3.2. NumPy_1.24.4. SciPy_1.10.1.
    Dataset ID......................: 68
    Dataset URL.....................: https://test.openml.org/d/68




.. GENERATED FROM PYTHON SOURCE LINES 67-71

Share the run on the OpenML server

So far the run is only available locally. By calling the publish function,
the run is sent to the OpenML server:

.. GENERATED FROM PYTHON SOURCE LINES 71-77

.. code-block:: Python


    myrun = run.publish()
    # For this tutorial, our configuration publishes to the test server
    # as to not pollute the main server.
    print(f"Uploaded to {myrun.openml_url}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Uploaded to https://test.openml.org/r/3820




.. GENERATED FROM PYTHON SOURCE LINES 78-79

We can now also inspect the flow object which was automatically created:

.. GENERATED FROM PYTHON SOURCE LINES 79-83

.. code-block:: Python


    flow = openml.flows.get_flow(run.flow_id)
    print(flow)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    OpenML Flow
    ===========
    Flow ID.........: 33 (version 3)
    Flow URL........: https://test.openml.org/f/33
    Flow Name.......: sklearn.tree._classes.DecisionTreeClassifier
    Flow Description: A decision tree classifier.
    Upload Date.....: 2024-10-17 13:54:17
    Dependencies....: sklearn==1.3.2
    numpy>=1.17.3
    scipy>=1.5.0
    joblib>=1.1.1
    threadpoolctl>=2.0.0




.. GENERATED FROM PYTHON SOURCE LINES 84-91

It also works with pipelines
############################

When you need to handle 'dirty' data, build pipelines to model then automatically.
To demonstrate this using the dataset `credit-a <https://test.openml.org/d/16>`_ via
`task <https://test.openml.org/t/96>`_ as it contains both numerical and categorical
variables and missing values in both.

.. GENERATED FROM PYTHON SOURCE LINES 91-167

.. code-block:: Python

    task = openml.tasks.get_task(96)

    # OpenML helper functions for sklearn can be plugged in directly for complicated pipelines
    from openml.extensions.sklearn import cat, cont

    pipe = pipeline.Pipeline(
        steps=[
            (
                "Preprocessing",
                compose.ColumnTransformer(
                    [
                        (
                            "categorical",
                            preprocessing.OneHotEncoder(handle_unknown="ignore"),
                            cat,  # returns the categorical feature indices
                        ),
                        (
                            "continuous",
                            impute.SimpleImputer(strategy="median"),
                            cont,
                        ),  # returns the numeric feature indices
                    ]
                ),
            ),
            ("Classifier", ensemble.RandomForestClassifier(n_estimators=10)),
        ]
    )

    run = openml.runs.run_model_on_task(pipe, task, avoid_duplicate_runs=False)
    myrun = run.publish()
    print(f"Uploaded to {myrun.openml_url}")


    # The above pipeline works with the helper functions that internally deal with pandas DataFrame.
    # In the case, pandas is not available, or a NumPy based data processing is the requirement, the
    # above pipeline is presented below to work with NumPy.

    # Extracting the indices of the categorical columns
    features = task.get_dataset().features
    categorical_feature_indices = []
    numeric_feature_indices = []
    for i in range(len(features)):
        if features[i].name == task.target_name:
            continue
        if features[i].data_type == "nominal":
            categorical_feature_indices.append(i)
        else:
            numeric_feature_indices.append(i)

    pipe = pipeline.Pipeline(
        steps=[
            (
                "Preprocessing",
                compose.ColumnTransformer(
                    [
                        (
                            "categorical",
                            preprocessing.OneHotEncoder(handle_unknown="ignore"),
                            categorical_feature_indices,
                        ),
                        (
                            "continuous",
                            impute.SimpleImputer(strategy="median"),
                            numeric_feature_indices,
                        ),
                    ]
                ),
            ),
            ("Classifier", ensemble.RandomForestClassifier(n_estimators=10)),
        ]
    )

    run = openml.runs.run_model_on_task(pipe, task, avoid_duplicate_runs=False)
    myrun = run.publish()
    print(f"Uploaded to {myrun.openml_url}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Uploaded to https://test.openml.org/r/3821
    Uploaded to https://test.openml.org/r/3822




.. GENERATED FROM PYTHON SOURCE LINES 168-172

Running flows on tasks offline for later upload
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
For those scenarios where there is no access to internet, it is possible to run
a model on a task without uploading results or flows to the server immediately.

.. GENERATED FROM PYTHON SOURCE LINES 172-195

.. code-block:: Python


    # To perform the following line offline, it is required to have been called before
    # such that the task is cached on the local openml cache directory:
    task = openml.tasks.get_task(96)

    # The following lines can then be executed offline:
    run = openml.runs.run_model_on_task(
        pipe,
        task,
        avoid_duplicate_runs=False,
        upload_flow=False,
    )

    # The run may be stored offline, and the flow will be stored along with it:
    run.to_filesystem(directory="myrun")

    # They may be loaded and uploaded at a later time
    run = openml.runs.OpenMLRun.from_filesystem(directory="myrun")
    run.publish()

    # Publishing the run will automatically upload the related flow if
    # it does not yet exist on the server.





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    OpenML Run
    ==========
    Uploader Name...................: None
    Metric..........................: None
    Local Result - Accuracy (+- STD): 0.8855 +- 0.0000
    Local Runtime - ms (+- STD).....: 29.2442 +- 0.0000
    Run ID..........................: 3823
    Run URL.........................: https://test.openml.org/r/3823
    Task ID.........................: 96
    Task Type.......................: None
    Task URL........................: https://test.openml.org/t/96
    Flow ID.........................: 834
    Flow Name.......................: sklearn.pipeline.Pipeline(Preprocessing=sklearn.compose._column_transformer.ColumnTransformer(categorical=sklearn.preprocessing._encoders.OneHotEncoder,continuous=sklearn.impute._base.SimpleImputer),Classifier=sklearn.ensemble._forest.RandomForestClassifier)
    Flow URL........................: https://test.openml.org/f/834
    Setup ID........................: None
    Setup String....................: Python_3.8.18. Sklearn_1.3.2. NumPy_1.24.4. SciPy_1.10.1.
    Dataset ID......................: None
    Dataset URL.....................: None



.. GENERATED FROM PYTHON SOURCE LINES 196-197

Alternatively, one can also directly run flows.

.. GENERATED FROM PYTHON SOURCE LINES 197-211

.. code-block:: Python


    # Get a task
    task = openml.tasks.get_task(403)

    # Build any classifier or pipeline
    clf = tree.ExtraTreeClassifier()

    # Obtain the scikit-learn extension interface to convert the classifier
    # into a flow object.
    extension = openml.extensions.get_extension_by_model(clf)
    flow = extension.model_to_flow(clf)

    run = openml.runs.run_flow_on_task(flow, task)








.. GENERATED FROM PYTHON SOURCE LINES 212-229

Challenge
^^^^^^^^^

Try to build the best possible models on several OpenML tasks,
compare your results with the rest of the class and learn from
them. Some tasks you could try (or browse openml.org):

* EEG eye state: data_id:`1471 <https://www.openml.org/d/1471>`_,
  task_id:`14951 <https://www.openml.org/t/14951>`_
* Volcanoes on Venus: data_id:`1527 <https://www.openml.org/d/1527>`_,
  task_id:`10103 <https://www.openml.org/t/10103>`_
* Walking activity: data_id:`1509 <https://www.openml.org/d/1509>`_,
  task_id:`9945 <https://www.openml.org/t/9945>`_, 150k instances.
* Covertype (Satellite): data_id:`150 <https://www.openml.org/d/150>`_,
  task_id:`218 <https://www.openml.org/t/218>`_, 500k instances.
* Higgs (Physics): data_id:`23512 <https://www.openml.org/d/23512>`_,
  task_id:`52950 <https://www.openml.org/t/52950>`_, 100k instances, missing values.

.. GENERATED FROM PYTHON SOURCE LINES 229-241

.. code-block:: Python


    # Easy benchmarking:
    for task_id in [115]:  # Add further tasks. Disclaimer: they might take some time
        task = openml.tasks.get_task(task_id)
        data = openml.datasets.get_dataset(task.dataset_id)
        clf = neighbors.KNeighborsClassifier(n_neighbors=5)

        run = openml.runs.run_model_on_task(clf, task, avoid_duplicate_runs=False)
        myrun = run.publish()
        print(f"kNN on {data.name}: {myrun.openml_url}")






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    kNN on diabetes: https://test.openml.org/r/3824




.. GENERATED FROM PYTHON SOURCE LINES 242-243

.. code-block:: Python

    openml.config.stop_using_configuration_for_example()








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 22.871 seconds)


.. _sphx_glr_download_examples_30_extended_flows_and_runs_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: flows_and_runs_tutorial.ipynb <flows_and_runs_tutorial.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: flows_and_runs_tutorial.py <flows_and_runs_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: flows_and_runs_tutorial.zip <flows_and_runs_tutorial.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
