
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/30_extended/tasks_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_30_extended_tasks_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_30_extended_tasks_tutorial.py:


Tasks
=====

A tutorial on how to list and download tasks.

.. GENERATED FROM PYTHON SOURCE LINES 7-14

.. code-block:: Python


    # License: BSD 3-Clause

    import openml
    from openml.tasks import TaskType
    import pandas as pd








.. GENERATED FROM PYTHON SOURCE LINES 15-26

Tasks are identified by IDs and can be accessed in two different ways:

1. In a list providing basic information on all tasks available on OpenML.
   This function will not download the actual tasks, but will instead download
   meta data that can be used to filter the tasks and retrieve a set of IDs.
   We can filter this list, for example, we can only list tasks having a
   special tag or only tasks for a specific target such as
   *supervised classification*.
2. A single task by its ID. It contains all meta information, the target
   metric, the splits and an iterator which can be used to access the
   splits in a useful manner.

.. GENERATED FROM PYTHON SOURCE LINES 29-37

Listing tasks
^^^^^^^^^^^^^

We will start by simply listing only *supervised classification* tasks.
**openml.tasks.list_tasks()** returns a dictionary of dictionaries by default, but we
request a
`pandas dataframe <https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html>`_
instead to have better visualization capabilities and easier access:

.. GENERATED FROM PYTHON SOURCE LINES 37-45

.. code-block:: Python


    tasks = openml.tasks.list_tasks(
        task_type=TaskType.SUPERVISED_CLASSIFICATION, output_format="dataframe"
    )
    print(tasks.columns)
    print(f"First 5 of {len(tasks)} tasks:")
    print(tasks.head())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Index(['tid', 'ttid', 'did', 'name', 'task_type', 'status',
           'estimation_procedure', 'evaluation_measures', 'source_data',
           'target_feature', 'MajorityClassSize', 'MaxNominalAttDistinctValues',
           'MinorityClassSize', 'NumberOfClasses', 'NumberOfFeatures',
           'NumberOfInstances', 'NumberOfInstancesWithMissingValues',
           'NumberOfMissingValues', 'NumberOfNumericFeatures',
           'NumberOfSymbolicFeatures', 'cost_matrix'],
          dtype='object')
    First 5 of 4381 tasks:
       tid  ... cost_matrix
    2    2  ...         NaN
    3    3  ...         NaN
    4    4  ...         NaN
    5    5  ...         NaN
    6    6  ...         NaN

    [5 rows x 21 columns]




.. GENERATED FROM PYTHON SOURCE LINES 46-48

We can filter the list of tasks to only contain datasets with more than
500 samples, but less than 1000 samples:

.. GENERATED FROM PYTHON SOURCE LINES 48-52

.. code-block:: Python


    filtered_tasks = tasks.query("NumberOfInstances > 500 and NumberOfInstances < 1000")
    print(list(filtered_tasks.index))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [2, 11, 15, 29, 37, 41, 49, 53, 232, 241, 245, 259, 267, 271, 279, 283, 1766, 1775, 1779, 1793, 1801, 1805, 1813, 1817, 1882, 1891, 1895, 1909, 1917, 1921, 1929, 1933, 1945, 1952, 1956, 1967, 1973, 1977, 1983, 1987, 2079, 2125, 2944, 3022, 3034, 3047, 3049, 3053, 3054, 3055, 3484, 3486, 3492, 3493, 3494, 3512, 3518, 3520, 3521, 3529, 3535, 3549, 3560, 3561, 3583, 3623, 3636, 3640, 3660, 3690, 3691, 3692, 3704, 3706, 3718, 3794, 3803, 3810, 3812, 3813, 3814, 3817, 3833, 3852, 3853, 3857, 3860, 3867, 3877, 3879, 3886, 3913, 3971, 3979, 3992, 3999, 4189, 4191, 4197, 4198, 4199, 4217, 4223, 4225, 4226, 4234, 4240, 4254, 4265, 4266, 4288, 4328, 4341, 4345, 4365, 4395, 4396, 4397, 4409, 4411, 4423, 4499, 4508, 4515, 4517, 4518, 4519, 4522, 4538, 4557, 4558, 4562, 4565, 4572, 4582, 4584, 4591, 4618, 4676, 4684, 4697, 4704, 7286, 7307, 7543, 7548, 7558, 9904, 9905, 9946, 9950, 9971, 9980, 9989, 9990, 10097, 10098, 10101, 12738, 12739, 14954, 14968, 145682, 145800, 145804, 145805, 145825, 145836, 145839, 145848, 145878, 145882, 145914, 145917, 145952, 145959, 145970, 145976, 145978, 146062, 146064, 146065, 146066, 146069, 146092, 146156, 146216, 146219, 146231, 146574, 146576, 146577, 146578, 146583, 146587, 146588, 146593, 146596, 146597, 146600, 146818, 146819, 166859, 166875, 166882, 166884, 166893, 166905, 166906, 166907, 166913, 166915, 166919, 166947, 166953, 166956, 166957, 166958, 166959, 166960, 166967, 166976, 166977, 166978, 166980, 166983, 166988, 166989, 166992, 167016, 167020, 167031, 167037, 167062, 167067, 167068, 167095, 167096, 167100, 167104, 167106, 167151, 167154, 167160, 167163, 167167, 167168, 167171, 167173, 167174, 167175, 167180, 167184, 167187, 167194, 167198, 168300, 168783, 168819, 168820, 168821, 168822, 168823, 168824, 168825, 168907, 189786, 189859, 189899, 189900, 189932, 189937, 189941, 190136, 190138, 190139, 190140, 190143, 190146, 233090, 233094, 233109, 233115, 233171, 233206, 359953, 359954, 359955, 360857, 360865, 360868, 360869, 360951, 360953, 360964, 361107, 361109, 361146, 361147, 361148, 361149, 361150, 361151, 361152, 361153, 361154, 361155, 361156, 361157, 361158, 361159, 361160, 361161, 361163, 361164, 361165, 361166, 361167, 361168, 361169, 361170, 361171, 361172, 361173, 361174, 361175, 361176, 361183, 361185, 361190, 361305, 361338, 361340, 361412, 361415, 361424, 361426, 361432, 361433, 361434, 361436, 361437, 361440, 361442, 361443, 361457, 361463, 361483, 361486, 361492, 361495, 361498, 361499, 361502, 361504, 361506, 361507, 361512, 361517, 361522, 361529, 361531, 361540, 361557, 361572, 361624, 361650, 361660, 361983, 361984, 361985, 361986, 361987, 361988, 361989]




.. GENERATED FROM PYTHON SOURCE LINES 53-57

.. code-block:: Python


    # Number of tasks
    print(len(filtered_tasks))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    375




.. GENERATED FROM PYTHON SOURCE LINES 58-59

Then, we can further restrict the tasks to all have the same resampling strategy:

.. GENERATED FROM PYTHON SOURCE LINES 59-63

.. code-block:: Python


    filtered_tasks = filtered_tasks.query('estimation_procedure == "10-fold Crossvalidation"')
    print(list(filtered_tasks.index))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [2, 11, 15, 29, 37, 41, 49, 53, 2079, 3022, 3484, 3486, 3492, 3493, 3494, 3512, 3518, 3520, 3521, 3529, 3535, 3549, 3560, 3561, 3583, 3623, 3636, 3640, 3660, 3690, 3691, 3692, 3704, 3706, 3718, 3794, 3803, 3810, 3812, 3813, 3814, 3817, 3833, 3852, 3853, 3857, 3860, 3867, 3877, 3879, 3886, 3913, 3971, 3979, 3992, 3999, 7286, 7307, 7548, 7558, 9904, 9905, 9946, 9950, 9971, 9980, 9989, 9990, 10097, 10098, 10101, 14954, 14968, 145682, 145800, 145804, 145805, 145825, 145836, 145839, 145848, 145878, 145882, 145914, 145917, 145952, 145959, 145970, 145976, 145978, 146062, 146064, 146065, 146066, 146069, 146092, 146156, 146216, 146219, 146231, 146818, 146819, 168300, 168907, 189932, 189937, 189941, 190136, 190138, 190139, 190140, 190143, 190146, 233171, 359953, 359954, 359955, 360857, 360865, 360868, 360869, 360951, 360953, 360964, 361107, 361109, 361146, 361147, 361148, 361149, 361150, 361151, 361152, 361153, 361154, 361155, 361156, 361157, 361158, 361159, 361160, 361161, 361163, 361164, 361165, 361166, 361167, 361168, 361169, 361170, 361171, 361172, 361173, 361174, 361175, 361176, 361183, 361185, 361190, 361305, 361338, 361340, 361983, 361984, 361985, 361987, 361988]




.. GENERATED FROM PYTHON SOURCE LINES 64-68

.. code-block:: Python


    # Number of tasks
    print(len(filtered_tasks))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    167




.. GENERATED FROM PYTHON SOURCE LINES 69-73

Resampling strategies can be found on the
`OpenML Website <https://www.openml.org/search?type=measure&q=estimation%20procedure>`_.

Similar to listing tasks by task type, we can list tasks by tags:

.. GENERATED FROM PYTHON SOURCE LINES 73-78

.. code-block:: Python


    tasks = openml.tasks.list_tasks(tag="OpenML100", output_format="dataframe")
    print(f"First 5 of {len(tasks)} tasks:")
    print(tasks.head())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First 5 of 91 tasks:
        tid  ... NumberOfSymbolicFeatures
    3     3  ...                       37
    6     6  ...                        1
    11   11  ...                        1
    12   12  ...                        1
    14   14  ...                        1

    [5 rows x 19 columns]




.. GENERATED FROM PYTHON SOURCE LINES 79-80

Furthermore, we can list tasks based on the dataset id:

.. GENERATED FROM PYTHON SOURCE LINES 80-85

.. code-block:: Python


    tasks = openml.tasks.list_tasks(data_id=1471, output_format="dataframe")
    print(f"First 5 of {len(tasks)} tasks:")
    print(tasks.head())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First 5 of 25 tasks:
             tid  ... number_samples
    9983    9983  ...            NaN
    14951  14951  ...            NaN
    56483  56483  ...            NaN
    56484  56484  ...            NaN
    56485  56485  ...            NaN

    [5 rows x 23 columns]




.. GENERATED FROM PYTHON SOURCE LINES 86-87

In addition, a size limit and an offset can be applied both separately and simultaneously:

.. GENERATED FROM PYTHON SOURCE LINES 87-91

.. code-block:: Python


    tasks = openml.tasks.list_tasks(size=10, offset=50, output_format="dataframe")
    print(tasks)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

        tid  ... number_samples
    59   59  ...            NaN
    60   60  ...            NaN
    62   62  ...              9
    63   63  ...             12
    64   64  ...              1
    65   65  ...              7
    66   66  ...              5
    67   67  ...              6
    68   68  ...              5
    69   69  ...              4

    [10 rows x 21 columns]




.. GENERATED FROM PYTHON SOURCE LINES 92-101

**OpenML 100**
is a curated list of 100 tasks to start using OpenML. They are all
supervised classification tasks with more than 500 instances and less than 50000
instances per task. To make things easier, the tasks do not contain highly
unbalanced data and sparse data. However, the tasks include missing values and
categorical features. You can find out more about the *OpenML 100* on
`the OpenML benchmarking page <https://docs.openml.org/benchmark/>`_.

Finally, it is also possible to list all tasks on OpenML with:

.. GENERATED FROM PYTHON SOURCE LINES 104-107

.. code-block:: Python

    tasks = openml.tasks.list_tasks(output_format="dataframe")
    print(len(tasks))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    47257




.. GENERATED FROM PYTHON SOURCE LINES 108-112

Exercise
########

Search for the tasks on the 'eeg-eye-state' dataset.

.. GENERATED FROM PYTHON SOURCE LINES 112-115

.. code-block:: Python


    tasks.query('name=="eeg-eye-state"')






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>tid</th>
          <th>ttid</th>
          <th>did</th>
          <th>name</th>
          <th>task_type</th>
          <th>status</th>
          <th>estimation_procedure</th>
          <th>evaluation_measures</th>
          <th>source_data</th>
          <th>target_feature</th>
          <th>MajorityClassSize</th>
          <th>MaxNominalAttDistinctValues</th>
          <th>MinorityClassSize</th>
          <th>NumberOfClasses</th>
          <th>NumberOfFeatures</th>
          <th>NumberOfInstances</th>
          <th>NumberOfInstancesWithMissingValues</th>
          <th>NumberOfMissingValues</th>
          <th>NumberOfNumericFeatures</th>
          <th>NumberOfSymbolicFeatures</th>
          <th>number_samples</th>
          <th>cost_matrix</th>
          <th>source_data_labeled</th>
          <th>target_feature_event</th>
          <th>target_feature_left</th>
          <th>target_feature_right</th>
          <th>quality_measure</th>
          <th>target_value</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>3511</th>
          <td>9983</td>
          <td>TaskType.SUPERVISED_CLASSIFICATION</td>
          <td>1471</td>
          <td>eeg-eye-state</td>
          <td>Supervised Classification</td>
          <td>active</td>
          <td>10-fold Crossvalidation</td>
          <td>NaN</td>
          <td>1471</td>
          <td>Class</td>
          <td>8257.0</td>
          <td>2.0</td>
          <td>6723.0</td>
          <td>2.0</td>
          <td>15.0</td>
          <td>14980.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>14.0</td>
          <td>1.0</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>4692</th>
          <td>14951</td>
          <td>TaskType.SUPERVISED_CLASSIFICATION</td>
          <td>1471</td>
          <td>eeg-eye-state</td>
          <td>Supervised Classification</td>
          <td>active</td>
          <td>10-fold Crossvalidation</td>
          <td>NaN</td>
          <td>1471</td>
          <td>Class</td>
          <td>8257.0</td>
          <td>2.0</td>
          <td>6723.0</td>
          <td>2.0</td>
          <td>15.0</td>
          <td>14980.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>14.0</td>
          <td>1.0</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>8032</th>
          <td>56483</td>
          <td>TaskType.SUBGROUP_DISCOVERY</td>
          <td>1471</td>
          <td>eeg-eye-state</td>
          <td>Subgroup Discovery</td>
          <td>active</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>1471</td>
          <td>Class</td>
          <td>8257.0</td>
          <td>2.0</td>
          <td>6723.0</td>
          <td>2.0</td>
          <td>15.0</td>
          <td>14980.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>14.0</td>
          <td>1.0</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>Cortana Quality</td>
          <td>1</td>
        </tr>
        <tr>
          <th>8033</th>
          <td>56484</td>
          <td>TaskType.SUBGROUP_DISCOVERY</td>
          <td>1471</td>
          <td>eeg-eye-state</td>
          <td>Subgroup Discovery</td>
          <td>active</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>1471</td>
          <td>Class</td>
          <td>8257.0</td>
          <td>2.0</td>
          <td>6723.0</td>
          <td>2.0</td>
          <td>15.0</td>
          <td>14980.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>14.0</td>
          <td>1.0</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>Information gain</td>
          <td>1</td>
        </tr>
        <tr>
          <th>8034</th>
          <td>56485</td>
          <td>TaskType.SUBGROUP_DISCOVERY</td>
          <td>1471</td>
          <td>eeg-eye-state</td>
          <td>Subgroup Discovery</td>
          <td>active</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>1471</td>
          <td>Class</td>
          <td>8257.0</td>
          <td>2.0</td>
          <td>6723.0</td>
          <td>2.0</td>
          <td>15.0</td>
          <td>14980.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>14.0</td>
          <td>1.0</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>Binomial test</td>
          <td>1</td>
        </tr>
        <tr>
          <th>8035</th>
          <td>56486</td>
          <td>TaskType.SUBGROUP_DISCOVERY</td>
          <td>1471</td>
          <td>eeg-eye-state</td>
          <td>Subgroup Discovery</td>
          <td>active</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>1471</td>
          <td>Class</td>
          <td>8257.0</td>
          <td>2.0</td>
          <td>6723.0</td>
          <td>2.0</td>
          <td>15.0</td>
          <td>14980.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>14.0</td>
          <td>1.0</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>Jaccard</td>
          <td>1</td>
        </tr>
        <tr>
          <th>8036</th>
          <td>56487</td>
          <td>TaskType.SUBGROUP_DISCOVERY</td>
          <td>1471</td>
          <td>eeg-eye-state</td>
          <td>Subgroup Discovery</td>
          <td>active</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>1471</td>
          <td>Class</td>
          <td>8257.0</td>
          <td>2.0</td>
          <td>6723.0</td>
          <td>2.0</td>
          <td>15.0</td>
          <td>14980.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>14.0</td>
          <td>1.0</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>Cortana Quality</td>
          <td>2</td>
        </tr>
        <tr>
          <th>8037</th>
          <td>56488</td>
          <td>TaskType.SUBGROUP_DISCOVERY</td>
          <td>1471</td>
          <td>eeg-eye-state</td>
          <td>Subgroup Discovery</td>
          <td>active</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>1471</td>
          <td>Class</td>
          <td>8257.0</td>
          <td>2.0</td>
          <td>6723.0</td>
          <td>2.0</td>
          <td>15.0</td>
          <td>14980.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>14.0</td>
          <td>1.0</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>Information gain</td>
          <td>2</td>
        </tr>
        <tr>
          <th>8038</th>
          <td>56489</td>
          <td>TaskType.SUBGROUP_DISCOVERY</td>
          <td>1471</td>
          <td>eeg-eye-state</td>
          <td>Subgroup Discovery</td>
          <td>active</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>1471</td>
          <td>Class</td>
          <td>8257.0</td>
          <td>2.0</td>
          <td>6723.0</td>
          <td>2.0</td>
          <td>15.0</td>
          <td>14980.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>14.0</td>
          <td>1.0</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>Binomial test</td>
          <td>2</td>
        </tr>
        <tr>
          <th>8039</th>
          <td>56490</td>
          <td>TaskType.SUBGROUP_DISCOVERY</td>
          <td>1471</td>
          <td>eeg-eye-state</td>
          <td>Subgroup Discovery</td>
          <td>active</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>1471</td>
          <td>Class</td>
          <td>8257.0</td>
          <td>2.0</td>
          <td>6723.0</td>
          <td>2.0</td>
          <td>15.0</td>
          <td>14980.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>14.0</td>
          <td>1.0</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>Jaccard</td>
          <td>2</td>
        </tr>
        <tr>
          <th>8581</th>
          <td>75219</td>
          <td>TaskType.SUPERVISED_CLASSIFICATION</td>
          <td>1471</td>
          <td>eeg-eye-state</td>
          <td>Supervised Classification</td>
          <td>active</td>
          <td>33% Holdout set</td>
          <td>predictive_accuracy</td>
          <td>1471</td>
          <td>Class</td>
          <td>8257.0</td>
          <td>2.0</td>
          <td>6723.0</td>
          <td>2.0</td>
          <td>15.0</td>
          <td>14980.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>14.0</td>
          <td>1.0</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>8663</th>
          <td>125901</td>
          <td>TaskType.LEARNING_CURVE</td>
          <td>1471</td>
          <td>eeg-eye-state</td>
          <td>Learning Curve</td>
          <td>active</td>
          <td>10-fold Learning Curve</td>
          <td>NaN</td>
          <td>1471</td>
          <td>Class</td>
          <td>8257.0</td>
          <td>2.0</td>
          <td>6723.0</td>
          <td>2.0</td>
          <td>15.0</td>
          <td>14980.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>14.0</td>
          <td>1.0</td>
          <td>17</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>9864</th>
          <td>127251</td>
          <td>TaskType.CLUSTERING</td>
          <td>1471</td>
          <td>eeg-eye-state</td>
          <td>Clustering</td>
          <td>active</td>
          <td>50 times Clustering</td>
          <td>NaN</td>
          <td>1471</td>
          <td>NaN</td>
          <td>8257.0</td>
          <td>2.0</td>
          <td>6723.0</td>
          <td>2.0</td>
          <td>15.0</td>
          <td>14980.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>14.0</td>
          <td>1.0</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>11920</th>
          <td>146761</td>
          <td>TaskType.CLUSTERING</td>
          <td>1471</td>
          <td>eeg-eye-state</td>
          <td>Clustering</td>
          <td>active</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>1471</td>
          <td>Class</td>
          <td>8257.0</td>
          <td>2.0</td>
          <td>6723.0</td>
          <td>2.0</td>
          <td>15.0</td>
          <td>14980.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>14.0</td>
          <td>1.0</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>13204</th>
          <td>148117</td>
          <td>TaskType.CLUSTERING</td>
          <td>1471</td>
          <td>eeg-eye-state</td>
          <td>Clustering</td>
          <td>active</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>1471</td>
          <td>NaN</td>
          <td>8257.0</td>
          <td>2.0</td>
          <td>6723.0</td>
          <td>2.0</td>
          <td>15.0</td>
          <td>14980.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>14.0</td>
          <td>1.0</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>17309</th>
          <td>170139</td>
          <td>TaskType.CLUSTERING</td>
          <td>1471</td>
          <td>eeg-eye-state</td>
          <td>Clustering</td>
          <td>active</td>
          <td>50 times Clustering</td>
          <td>NaN</td>
          <td>1471</td>
          <td>NaN</td>
          <td>8257.0</td>
          <td>2.0</td>
          <td>6723.0</td>
          <td>2.0</td>
          <td>15.0</td>
          <td>14980.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>14.0</td>
          <td>1.0</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>20760</th>
          <td>191646</td>
          <td>TaskType.CLUSTERING</td>
          <td>1471</td>
          <td>eeg-eye-state</td>
          <td>Clustering</td>
          <td>active</td>
          <td>50 times Clustering</td>
          <td>NaN</td>
          <td>1471</td>
          <td>NaN</td>
          <td>8257.0</td>
          <td>2.0</td>
          <td>6723.0</td>
          <td>2.0</td>
          <td>15.0</td>
          <td>14980.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>14.0</td>
          <td>1.0</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>24446</th>
          <td>213320</td>
          <td>TaskType.CLUSTERING</td>
          <td>1471</td>
          <td>eeg-eye-state</td>
          <td>Clustering</td>
          <td>active</td>
          <td>50 times Clustering</td>
          <td>NaN</td>
          <td>1471</td>
          <td>NaN</td>
          <td>8257.0</td>
          <td>2.0</td>
          <td>6723.0</td>
          <td>2.0</td>
          <td>15.0</td>
          <td>14980.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>14.0</td>
          <td>1.0</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>27655</th>
          <td>234435</td>
          <td>TaskType.CLUSTERING</td>
          <td>1471</td>
          <td>eeg-eye-state</td>
          <td>Clustering</td>
          <td>active</td>
          <td>50 times Clustering</td>
          <td>NaN</td>
          <td>1471</td>
          <td>NaN</td>
          <td>8257.0</td>
          <td>2.0</td>
          <td>6723.0</td>
          <td>2.0</td>
          <td>15.0</td>
          <td>14980.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>14.0</td>
          <td>1.0</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>31979</th>
          <td>256739</td>
          <td>TaskType.CLUSTERING</td>
          <td>1471</td>
          <td>eeg-eye-state</td>
          <td>Clustering</td>
          <td>active</td>
          <td>50 times Clustering</td>
          <td>NaN</td>
          <td>1471</td>
          <td>NaN</td>
          <td>8257.0</td>
          <td>2.0</td>
          <td>6723.0</td>
          <td>2.0</td>
          <td>15.0</td>
          <td>14980.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>14.0</td>
          <td>1.0</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>31989</th>
          <td>256750</td>
          <td>TaskType.CLUSTERING</td>
          <td>1471</td>
          <td>eeg-eye-state</td>
          <td>Clustering</td>
          <td>active</td>
          <td>50 times Clustering</td>
          <td>NaN</td>
          <td>1471</td>
          <td>NaN</td>
          <td>8257.0</td>
          <td>2.0</td>
          <td>6723.0</td>
          <td>2.0</td>
          <td>15.0</td>
          <td>14980.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>14.0</td>
          <td>1.0</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>37166</th>
          <td>297708</td>
          <td>TaskType.CLUSTERING</td>
          <td>1471</td>
          <td>eeg-eye-state</td>
          <td>Clustering</td>
          <td>active</td>
          <td>50 times Clustering</td>
          <td>NaN</td>
          <td>1471</td>
          <td>NaN</td>
          <td>8257.0</td>
          <td>2.0</td>
          <td>6723.0</td>
          <td>2.0</td>
          <td>15.0</td>
          <td>14980.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>14.0</td>
          <td>1.0</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>40370</th>
          <td>318835</td>
          <td>TaskType.CLUSTERING</td>
          <td>1471</td>
          <td>eeg-eye-state</td>
          <td>Clustering</td>
          <td>active</td>
          <td>50 times Clustering</td>
          <td>NaN</td>
          <td>1471</td>
          <td>NaN</td>
          <td>8257.0</td>
          <td>2.0</td>
          <td>6723.0</td>
          <td>2.0</td>
          <td>15.0</td>
          <td>14980.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>14.0</td>
          <td>1.0</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>43587</th>
          <td>339990</td>
          <td>TaskType.CLUSTERING</td>
          <td>1471</td>
          <td>eeg-eye-state</td>
          <td>Clustering</td>
          <td>active</td>
          <td>50 times Clustering</td>
          <td>NaN</td>
          <td>1471</td>
          <td>NaN</td>
          <td>8257.0</td>
          <td>2.0</td>
          <td>6723.0</td>
          <td>2.0</td>
          <td>15.0</td>
          <td>14980.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>14.0</td>
          <td>1.0</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>46851</th>
          <td>361459</td>
          <td>TaskType.SUPERVISED_CLASSIFICATION</td>
          <td>1471</td>
          <td>eeg-eye-state</td>
          <td>Supervised Classification</td>
          <td>active</td>
          <td>5 times 2-fold Crossvalidation</td>
          <td>NaN</td>
          <td>1471</td>
          <td>Class</td>
          <td>8257.0</td>
          <td>2.0</td>
          <td>6723.0</td>
          <td>2.0</td>
          <td>15.0</td>
          <td>14980.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>14.0</td>
          <td>1.0</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 116-122

Downloading tasks
^^^^^^^^^^^^^^^^^

We provide two functions to download tasks, one which downloads only a
single task by its ID, and one which takes a list of IDs and downloads
all of these tasks:

.. GENERATED FROM PYTHON SOURCE LINES 122-126

.. code-block:: Python


    task_id = 31
    task = openml.tasks.get_task(task_id)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/sphinx_gallery/gen_rst.py:722: FutureWarning: Starting from Version 0.15.0 `download_splits` will default to ``False`` instead of ``True`` and be independent from `download_data`. To disable this message until version 0.15 explicitly set `download_splits` to a bool.
      exec(self.code, self.fake_main.__dict__)
    /home/runner/work/openml-python/openml-python/openml/tasks/functions.py:442: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      dataset = get_dataset(task.dataset_id, *dataset_args, **get_dataset_kwargs)




.. GENERATED FROM PYTHON SOURCE LINES 127-128

Properties of the task are stored as member variables:

.. GENERATED FROM PYTHON SOURCE LINES 128-131

.. code-block:: Python


    print(task)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    OpenML Classification Task
    ==========================
    Task Type Description: https://www.openml.org/tt/TaskType.SUPERVISED_CLASSIFICATION
    Task ID..............: 31
    Task URL.............: https://www.openml.org/t/31
    Estimation Procedure.: crossvalidation
    Target Feature.......: class
    # of Classes.........: 2
    Cost Matrix..........: Available




.. GENERATED FROM PYTHON SOURCE LINES 132-133

And:

.. GENERATED FROM PYTHON SOURCE LINES 133-138

.. code-block:: Python


    ids = [2, 1891, 31, 9983]
    tasks = openml.tasks.get_tasks(ids)
    print(tasks[0])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/work/openml-python/openml-python/examples/30_extended/tasks_tutorial.py:135: FutureWarning: Starting from Version 0.15.0 `download_splits` will default to ``False`` instead of ``True`` and be independent from `download_data`. To disable this message until version 0.15 explicitly set `download_splits` to a bool.
      tasks = openml.tasks.get_tasks(ids)
    OpenML Classification Task
    ==========================
    Task Type Description: https://www.openml.org/tt/TaskType.SUPERVISED_CLASSIFICATION
    Task ID..............: 2
    Task URL.............: https://www.openml.org/t/2
    Estimation Procedure.: crossvalidation
    Evaluation Measure...: predictive_accuracy
    Target Feature.......: class
    # of Classes.........: 6
    Cost Matrix..........: Available




.. GENERATED FROM PYTHON SOURCE LINES 139-165

Creating tasks
^^^^^^^^^^^^^^

You can also create new tasks. Take the following into account:

* You can only create tasks on *active* datasets
* For now, only the following tasks are supported: classification, regression,
  clustering, and learning curve analysis.
* For now, tasks can only be created on a single dataset.
* The exact same task must not already exist.

Creating a task requires the following input:

* task_type: The task type ID, required (see below). Required.
* dataset_id: The dataset ID. Required.
* target_name: The name of the attribute you aim to predict. Optional.
* estimation_procedure_id : The ID of the estimation procedure used to create train-test
  splits. Optional.
* evaluation_measure: The name of the evaluation measure. Optional.
* Any additional inputs for specific tasks

It is best to leave the evaluation measure open if there is no strong prerequisite for a
specific measure. OpenML will always compute all appropriate measures and you can filter
or sort results on your favourite measure afterwards. Only add an evaluation measure if
necessary (e.g. when other measure make no sense), since it will create a new task, which
scatters results across tasks.

.. GENERATED FROM PYTHON SOURCE LINES 167-171

We'll use the test server for the rest of this tutorial.

.. warning::
   .. include:: ../../test_server_usage_warning.txt

.. GENERATED FROM PYTHON SOURCE LINES 171-173

.. code-block:: Python

    openml.config.start_using_configuration_for_example()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/work/openml-python/openml-python/examples/30_extended/tasks_tutorial.py:171: UserWarning: Switching to the test server https://test.openml.org/api/v1/xml to not upload results to the live server. Using the test server may result in reduced performance of the API!
      openml.config.start_using_configuration_for_example()




.. GENERATED FROM PYTHON SOURCE LINES 174-183

Example
#######

Let's create a classification task on a dataset. In this example we will do this on the
Iris dataset (ID=128 (on test server)). We'll use 10-fold cross-validation (ID=1),
and *predictive accuracy* as the predefined measure (this can also be left open).
If a task with these parameters exists, we will get an appropriate exception.
If such a task doesn't exist, a task will be created and the corresponding task_id
will be returned.

.. GENERATED FROM PYTHON SOURCE LINES 183-211

.. code-block:: Python



    try:
        my_task = openml.tasks.create_task(
            task_type=TaskType.SUPERVISED_CLASSIFICATION,
            dataset_id=128,
            target_name="class",
            evaluation_measure="predictive_accuracy",
            estimation_procedure_id=1,
        )
        my_task.publish()
    except openml.exceptions.OpenMLServerException as e:
        # Error code for 'task already exists'
        if e.code == 614:
            # Lookup task
            tasks = openml.tasks.list_tasks(data_id=128, output_format="dataframe")
            tasks = tasks.query(
                'task_type == "Supervised Classification" '
                'and estimation_procedure == "10-fold Crossvalidation" '
                'and evaluation_measures == "predictive_accuracy"'
            )
            task_id = tasks.loc[:, "tid"].values[0]
            print("Task already exists. Task ID is", task_id)

    # reverting to prod server
    openml.config.stop_using_configuration_for_example()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/work/openml-python/openml-python/openml/tasks/functions.py:285: RuntimeWarning: Could not create task type id for 10 due to error 10 is not a valid TaskType
      procs = _get_estimation_procedure_list()
    /home/runner/work/openml-python/openml-python/openml/tasks/functions.py:285: RuntimeWarning: Could not create task type id for 11 due to error 11 is not a valid TaskType
      procs = _get_estimation_procedure_list()
    /home/runner/work/openml-python/openml-python/openml/tasks/functions.py:234: RuntimeWarning: Could not create task type id for 10 due to error 10 is not a valid TaskType
      return __list_tasks(api_call=api_call, output_format=output_format)
    Task already exists. Task ID is 1364




.. GENERATED FROM PYTHON SOURCE LINES 212-216

* `Complete list of task types <https://www.openml.org/search?type=task_type>`_.
* `Complete list of model estimation procedures <https://www.openml.org/search?q=%2520measure_type%3Aestimation_procedure&type=measure>`_.
* `Complete list of evaluation measures <https://www.openml.org/search?q=measure_type%3Aevaluation_measure&type=measure>`_.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (2 minutes 19.648 seconds)


.. _sphx_glr_download_examples_30_extended_tasks_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: tasks_tutorial.ipynb <tasks_tutorial.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: tasks_tutorial.py <tasks_tutorial.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
