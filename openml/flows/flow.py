from collections import OrderedDict
import xmltodict
import sklearn

from .._api_calls import _perform_api_call
from .. import config


class OpenMLFlow(object):
    """OpenML Flow. Stores machine learning models.

    Parameters
    ----------
    model : scikit-learn compatible model
        The model the flow consists of. The model needs to have fit and predict methods.
    description : string
        Description of the flow (free text).
    creator : string
        FIXME
    contributor : string
        FIXME
    tag : string
        FIXME
    id : int, optional
        Flow ID. Assigned by the server (fixme shouldn't be here?)
    uploader : string, optional
        User uploading the model (fixme shouldn't be here?). Assigned by the server.


    """
    def __init__(self, model, id=None, uploader=None,
                 description='Flow generated by run_task', creator=None,
                 contributor=None, tag=None):
        self.id = id
        self.upoader = uploader
        self.description = description
        self.creator = creator
        self.tag = tag
        self.model = model
        self.source = "FIXME DEFINE PYTHON FLOW"
        # TODO add scikit-learn here!
        self.name = (model.__module__ + "." +
                     model.__class__.__name__)
        self.external_version = 'sklearn_' + sklearn.__version__

    def _generate_flow_xml(self):
        """Generate xml representation of self for upload to server.

        Returns
        -------
        flow_xml : string
            Flow represented as XML string.
        """
        model = self.model

        if config._testmode:
            flow_name = '%s%s' % (config.testsentinel, self.name)
        else:
            flow_name = self.name

        flow_dict = OrderedDict()
        flow_dict['oml:flow'] = OrderedDict()
        flow_dict['oml:flow']['@xmlns:oml'] = 'http://openml.org/openml'
        flow_dict['oml:flow']['oml:name'] = flow_name
        flow_dict['oml:flow']['oml:external_version'] = self.external_version
        flow_dict['oml:flow']['oml:description'] = self.description

        clf_params = model.get_params()
        flow_parameters = []
        for k, v in clf_params.items():
            # data_type, default_value, description, recommendedRange
            # type = v.__class__.__name__    Not using this because it doesn't conform standards
            # eg. int instead of integer
            param_dict = {'oml:name': k}
            flow_parameters.append(param_dict)

        flow_dict['oml:flow']['oml:parameter'] = flow_parameters

        flow_xml = xmltodict.unparse(flow_dict, pretty=True)

        # A flow may not be uploaded with the encoding specification..
        flow_xml = flow_xml.split('\n', 1)[-1]
        return flow_xml

    def publish(self):
        """
        The 'description' is binary data of an XML file according to the XSD Schema (OUTDATED!):
        https://github.com/openml/website/blob/master/openml_OS/views/pages/rest_api/xsd/openml.implementation.upload.xsd
        """
        xml_description = self._generate_flow_xml()

        file_elements = {'description': xml_description} #, 'source': self.source}
        return_code, return_value = _perform_api_call(
            "flow/", file_elements=file_elements)
        return return_code, return_value

    def _ensure_flow_exists(self):
        """ Checks if a flow exists for the given model and possibly creates it.

        If the given flow exists on the server, the flow-id will simply
        be returned. Otherwise it will be uploaded to the server.

        Returns
        -------
        flow_id : int
            Flow id on the server.
        """
        import sklearn
        flow_version = 'sklearn_' + sklearn.__version__
        _, _, flow_id = _check_flow_exists(self.name, flow_version)
        # TODO add numpy and scipy version!

        if int(flow_id) == -1:
            return_code, response_xml = self.publish()

            response_dict = xmltodict.parse(response_xml)
            flow_id = response_dict['oml:upload_flow']['oml:id']
            return int(flow_id)

        return int(flow_id)


def _check_flow_exists(name, version):
    """Retrieves the flow id of the flow uniquely identified by name+version.

    Parameter
    ---------
    name : string
        Name of the flow
    version : string
        Version information associated with flow.

    Returns
    -------
    flow_exist : int
        Flow id or -1 if the flow doesn't exist.

    Notes
    -----
    see http://www.openml.org/api_docs/#!/flow/get_flow_exists_name_version
    """
    if not (type(name) is str and len(name) > 0):
        raise ValueError('Argument \'name\' should be a non-empty string')
    if not (type(version) is str and len(version) > 0):
        raise ValueError('Argument \'version\' should be a non-empty string')

    if config._testmode:
        # It could already be in the name, for example when checking if a
        # downloaded flow exists on the server
        if config.testsentinel not in name:
            name = '%s%s' % (config.testsentinel, name)

    return_code, xml_response = _perform_api_call(
        "flow/exists/%s/%s" % (name, version))
    # TODO check with latest version of code if this raises an exception
    if return_code != 200:
        # fixme raise appropriate error
        raise ValueError("api call failed: %s" % xml_response)
    xml_dict = xmltodict.parse(xml_response)
    flow_id = xml_dict['oml:flow_exists']['oml:id']
    return return_code, xml_response, flow_id
